{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/justinochoa/Desktop/twitch-clone/client/src/Components/GoogleAuth.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { signIn, signOut } from \"../actions/index\";\nimport dotenv from \"dotenv\";\n\nrequire(\"dotenv\").config();\n\nclass GoogleAuth extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onAuthChange = isSignedIn => {\n      if (isSignedIn) {\n        this.props.signIn(this.auth.currentUser.get().getId());\n      } else {\n        this.props.signOut();\n      }\n    };\n\n    this.onSignIn = () => {\n      this.auth.signIn();\n    };\n\n    this.onSignOut = () => {\n      this.auth.signOut();\n    };\n  }\n\n  componentDidMount() {\n    window.gapi.load(\"client:auth2\", () => {\n      window.gapi.client.init({\n        clientId: process.env.REACT_APP_CLIENT_ID,\n        scope: \"email\"\n      }).then(() => {\n        this.auth = window.gapi.auth2.getAuthInstance();\n        this.onAuthChange(this.auth.isSignedIn.get());\n        this.auth.isSignedIn.listen(this.onAuthChange);\n      });\n    });\n  }\n\n  renderAuthButton() {\n    if (this.props.isSignedIn === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"I don't know if I am signed in!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 14\n      }, this);\n    } else if (this.props.isSignedIn) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ui red google button\",\n        onClick: this.onSignOut,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"google icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), \"Sign Out\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ui red google button\",\n          onClick: this.onSignIn,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"google icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this), \"Sign in\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.renderAuthButton()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isSignedIn: state.auth.isSignedIn\n  };\n};\n\nexport default connect(mapStateToProps, {\n  signIn,\n  signOut\n})(GoogleAuth);","map":{"version":3,"sources":["/Users/justinochoa/Desktop/twitch-clone/client/src/Components/GoogleAuth.js"],"names":["React","Component","connect","signIn","signOut","dotenv","require","config","GoogleAuth","onAuthChange","isSignedIn","props","auth","currentUser","get","getId","onSignIn","onSignOut","componentDidMount","window","gapi","load","client","init","clientId","process","env","REACT_APP_CLIENT_ID","scope","then","auth2","getAuthInstance","listen","renderAuthButton","render","mapStateToProps","state"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,kBAAhC;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AACAC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEA,MAAMC,UAAN,SAAyBP,SAAzB,CAAmC;AAAA;AAAA;;AAAA,SAgBjCQ,YAhBiC,GAgBjBC,UAAD,IAAgB;AAC7B,UAAIA,UAAJ,EAAgB;AACd,aAAKC,KAAL,CAAWR,MAAX,CAAkB,KAAKS,IAAL,CAAUC,WAAV,CAAsBC,GAAtB,GAA4BC,KAA5B,EAAlB;AACD,OAFD,MAEO;AACL,aAAKJ,KAAL,CAAWP,OAAX;AACD;AACF,KAtBgC;;AAAA,SAwBjCY,QAxBiC,GAwBtB,MAAM;AACf,WAAKJ,IAAL,CAAUT,MAAV;AACD,KA1BgC;;AAAA,SA4BjCc,SA5BiC,GA4BrB,MAAM;AAChB,WAAKL,IAAL,CAAUR,OAAV;AACD,KA9BgC;AAAA;;AACjCc,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiB,cAAjB,EAAiC,MAAM;AACrCF,MAAAA,MAAM,CAACC,IAAP,CAAYE,MAAZ,CACGC,IADH,CACQ;AACJC,QAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,mBADlB;AAEJC,QAAAA,KAAK,EAAE;AAFH,OADR,EAKGC,IALH,CAKQ,MAAM;AACV,aAAKjB,IAAL,GAAYO,MAAM,CAACC,IAAP,CAAYU,KAAZ,CAAkBC,eAAlB,EAAZ;AACA,aAAKtB,YAAL,CAAkB,KAAKG,IAAL,CAAUF,UAAV,CAAqBI,GAArB,EAAlB;AACA,aAAKF,IAAL,CAAUF,UAAV,CAAqBsB,MAArB,CAA4B,KAAKvB,YAAjC;AACD,OATH;AAUD,KAXD;AAYD;;AAkBDwB,EAAAA,gBAAgB,GAAG;AACjB,QAAI,KAAKtB,KAAL,CAAWD,UAAX,KAA0B,IAA9B,EAAoC;AAClC,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD,MAEO,IAAI,KAAKC,KAAL,CAAWD,UAAf,EAA2B;AAChC,0BACE;AAAQ,QAAA,SAAS,EAAC,sBAAlB;AAAyC,QAAA,OAAO,EAAE,KAAKO,SAAvD;AAAA,gCACE;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBADF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAMD,KAPM,MAOA;AACL,0BACE;AAAA,+BACE;AAAQ,UAAA,SAAS,EAAC,sBAAlB;AAAyC,UAAA,OAAO,EAAE,KAAKD,QAAvD;AAAA,kCACE;AAAG,YAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,kBADF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAQD;AACF;;AAEDkB,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAA,gBAAM,KAAKD,gBAAL;AAAN;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAxDgC;;AA0DnC,MAAME,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AAAE1B,IAAAA,UAAU,EAAE0B,KAAK,CAACxB,IAAN,CAAWF;AAAzB,GAAP;AACD,CAFD;;AAIA,eAAeR,OAAO,CAACiC,eAAD,EAAkB;AAAEhC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAlB,CAAP,CAA8CI,UAA9C,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { signIn, signOut } from \"../actions/index\";\nimport dotenv from \"dotenv\";\nrequire(\"dotenv\").config();\n\nclass GoogleAuth extends Component {\n  componentDidMount() {\n    window.gapi.load(\"client:auth2\", () => {\n      window.gapi.client\n        .init({\n          clientId: process.env.REACT_APP_CLIENT_ID,\n          scope: \"email\",\n        })\n        .then(() => {\n          this.auth = window.gapi.auth2.getAuthInstance();\n          this.onAuthChange(this.auth.isSignedIn.get());\n          this.auth.isSignedIn.listen(this.onAuthChange);\n        });\n    });\n  }\n\n  onAuthChange = (isSignedIn) => {\n    if (isSignedIn) {\n      this.props.signIn(this.auth.currentUser.get().getId());\n    } else {\n      this.props.signOut();\n    }\n  };\n\n  onSignIn = () => {\n    this.auth.signIn();\n  };\n\n  onSignOut = () => {\n    this.auth.signOut();\n  };\n\n  renderAuthButton() {\n    if (this.props.isSignedIn === null) {\n      return <div>I don't know if I am signed in!</div>;\n    } else if (this.props.isSignedIn) {\n      return (\n        <button className=\"ui red google button\" onClick={this.onSignOut}>\n          <i className=\"google icon\" />\n          Sign Out\n        </button>\n      );\n    } else {\n      return (\n        <div>\n          <button className=\"ui red google button\" onClick={this.onSignIn}>\n            <i className=\"google icon\" />\n            Sign in\n          </button>\n        </div>\n      );\n    }\n  }\n\n  render() {\n    return <div>{this.renderAuthButton()}</div>;\n  }\n}\nconst mapStateToProps = (state) => {\n  return { isSignedIn: state.auth.isSignedIn };\n};\n\nexport default connect(mapStateToProps, { signIn, signOut })(GoogleAuth);\n"]},"metadata":{},"sourceType":"module"}